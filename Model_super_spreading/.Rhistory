get_sim_data_mcmc_runs(results_home, sim_data_rep, mcmc_params, list_i)
}
##############################################
#MODELs x3 APPLY - INSPECT SPECIFIC REPS
time_elap = 1.15
model_type = 'sse_inf_sse_sim' #'sse_inf_ssi_sim' ' #'sse_inf_base_sim'  #'sse_inf_sse_sim' #'sse_inf_ssi_sim' #' #base_sim_sse_inf'
iter = 1
n_mcmc = 5500
n_reps = 100
n_mcmc = 5500
n_reps = 100
#SSE
df_sseI = get_df_p_vals(results_home, model_type, iter)
View(df_sseI)
results_home
#Plot p vals
plot_p_vals(df_sseI)
plot_p_vals <- function(df_p_vals){
'Plot histograms of the p values'
par(mfrow=c(3,4)) #c(3,4)
#Prop lt than 0.05
num_iters = length(df_p_vals[,1])
for (i in c(1:11)){
#Prop lt 0.05
val_05 = 0.05
prop_05 = length(which(df_p_vals[,i] < val_05))/num_iters
hist(df_p_vals[,i], breaks = 100, #freq = FALSE,
#xlim = c(xmin, xmax),
xlab = paste0('p value, prop < 0.05: ', prop_05),
ylab = 'Num Samples', col = 'green',
main = paste('', toupper(colnames(df_p_vals)[i]),', R0:', true_r0),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(v = 0.05, col = 'red', lwd = 2)
}
}
#Plot p vals
plot_p_vals(df_sseI)
plot_p_vals <- function(df_p_vals){
'Plot histograms of the p values'
par(mfrow=c(3,4)) #c(3,4)
#Prop lt than 0.05
num_iters = length(df_p_vals[,1])
for (i in c(1:11)){
#Prop lt 0.05
val_05 = 0.05
percent_lt_05 = (length(which(df_p_vals[,i] < val_05))/num_iters)*100
hist(df_p_vals[,i], breaks = 100, #freq = FALSE,
#xlim = c(xmin, xmax),
xlab = paste0('p value, < 0.05: ', percent_lt_05. '%'),
ylab = 'Num Samples', col = 'green',
main = paste('', toupper(colnames(df_p_vals)[i]),', R0:', true_r0),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(v = 0.05, col = 'red', lwd = 2)
}
}
plot_p_vals <- function(df_p_vals){
'Plot histograms of the p values'
par(mfrow=c(3,4)) #c(3,4)
#Prop lt than 0.05
num_iters = length(df_p_vals[,1])
for (i in c(1:11)){
#Prop lt 0.05
val_05 = 0.05
percent_lt_05 = (length(which(df_p_vals[,i] < val_05))/num_iters)*100
hist(df_p_vals[,i], breaks = 100, #freq = FALSE,
#xlim = c(xmin, xmax),
xlab = paste0('p value, < 0.05: ', percent_lt_05, '%'),
ylab = 'Num Samples', col = 'green',
main = paste('', toupper(colnames(df_p_vals)[i]),', R0:', true_r0),
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(v = 0.05, col = 'red', lwd = 2)
}
}
#Plot p vals
plot_p_vals(df_sseI)
5500/1000
5500/5
run_mcmc_reps <- function(n, n_reps, model_params, sigma, flag_dt, base_folder, burn_in){
'Run mcmc for n_reps iterations and save'
#Get model params
alphaX = model_params[1]; betaX = model_params[2]
gammaX = model_params[3]; r0 = model_params[4];
#Data_type
flag1 = flag_dt[1]; flag2 = flag_dt[2]; flag3 = flag_dt[3]
cat('r0 = ', r0, '\n');
#Repeat for n reps
for(rep in 1:n_reps) {
cat('\n rep =', rep, '\n')
folder_rep = paste0(base_folder, '/rep_', rep)
ifelse(!dir.exists(file.path(folder_rep)), dir.create(file.path(folder_rep), recursive = TRUE), FALSE)
#Simulate data
if (flag1){
sim_data = simulate_branching_ss(num_days, shape_gamma, scale_gamma, alphaX, betaX, gammaX)
saveRDS(sim_data, file = paste0(folder_rep, '/sim_data.rds'))
} else if (flag2){
sim_data = simulation_super_spreaders(num_days, shape_gamma, scale_gamma, alphaX, betaX, gammaX)
cat('simulate ss individs')
saveRDS(sim_data, file = paste0(folder_rep, '/sim_data.rds'))
} else if (flag3) {
sim_data = simulate_branching(num_days, r0, shape_gamma, scale_gamma)
saveRDS(sim_data, file = paste0(folder_rep, '/sim_data.rds'))
cat('simulate_branching')
}
#MCMC
mcmc_params = mcmc_ss_x4(sim_data, n, sigma, thinning_factor, folder_rep, rep, burn_in)
#SAVE MCMC PARAMS
saveRDS(mcmc_params, file = paste0(folder_rep, '/mcmc_params_rep_', rep, '.rds' ))
}
}
model_type = 'sse_inf_sse_sim' #base_sim_sse_inf' #'ssi_sim_sse_inf'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 2
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n_mcmc = 5500
n_reps = 100
burn_in = 500
thinning_factor = 5 #0 #(1/1000)*n;
#START MCMC
# start_time = Sys.time()
# print('Start time:')
# print(start_time)
# #run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
# end_time = Sys.time()
# total_time_elap = round(end_time - start_time, 2)
# print('Time elapsed:')
# print(time_elap)
###############
#APPLY SUMMARY STATS + p vals
n_reps = 100
start_time = Sys.time()
print('Start time:')
print(start_time)
get_sum_stats_total(base_folder_current, n_reps)
df_p_valuesI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
time_elapI = round(difftime(end_time, start_time, units='hours'), 2) #round(end_time - start_time, 2)
print(paste0('Time elapsed:', time_elapI))
#PLOT
plot_p_vals(df_p_valuesI)
#plot_p_vals(df_p_vals_si)
############################################################
#RUN II - sse_inf_ssi_sim
#APPLY MCMC
model_type = 'sse_inf_ssi_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, TRUE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n = 5500
n_reps = 100
burn_in = 500
thinning_factor = 50 #(1/1000)*n;
start_time = Sys.time()
print('Start time:')
print(start_time)
#run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
time_elapA = round(end_time - start_time, 2)
print(paste0('Time elapsed mcmc :', time_elapA))
###############
#APPLY SUMMARY STATS + p vals
n_reps = 69 #100
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, n_reps)
df_p_valuesII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
#time_elapII = time_elapA + round(end_time - start_time, 2)
#print(paste0('Time elapsed total:', time_elapIII))
#PLOT
plot_p_vals(df_p_valuesII)
############################################################
#RUN III - sse_inf_base_sim
#APPLY MCMC
model_type = 'sse_inf_base_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, FALSE, TRUE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n = 5500
n_reps = 100
burn_in = 500
thinning_factor = 50 #(1/1000)*n;
#RUN MCMC
# start_time = Sys.time()
# print('Start time:')
# print(start_time)
# #run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
# end_time = Sys.time()
# time_elapA = round(end_time - start_time, 2)
# print(paste0('Time elapsed mcmc :', time_elapA))
###############
#APPLY SUMMARY STATS + p vals
n_reps = 100
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, n_reps)
df_p_valuesIII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
print(end_time)
#time_elapIII = time_elapA + round(end_time - start_time, 2)
#print(paste0('Time elapsed total:', time_elapIII))
#PLOT
plot_p_vals(df_p_valuesIII)
get_sum_stats_total <- function(base_folder_current, n_reps, n_mcmc){
#APPLY MCMC
model_type = 'sse_inf_sse_sim' #base_sim_sse_inf' #'ssi_sim_sse_inf'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 2
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n_mcmc = 5500
n_reps = 100
burn_in = 500
thinning_factor = 5 #0 #(1/1000)*n;
#START MCMC
# start_time = Sys.time()
# print('Start time:')
# print(start_time)
# #run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
# end_time = Sys.time()
# total_time_elap = round(end_time - start_time, 2)
# print('Time elapsed:')
# print(time_elap)
###############
#APPLY SUMMARY STATS + p vals
n_reps = 100
start_time = Sys.time()
print('Start time:')
print(start_time)
get_sum_stats_total(base_folder_current, n_reps, n_mcmc)
df_p_valuesI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
time_elapI = round(difftime(end_time, start_time, units='hours'), 2) #round(end_time - start_time, 2)
print(paste0('Time elapsed:', time_elapI))
#PLOT
plot_p_vals(df_p_valuesI)
#plot_p_vals(df_p_vals_si)
############################################################
#RUN II - sse_inf_ssi_sim
#APPLY MCMC
model_type = 'sse_inf_ssi_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, TRUE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n = 5500
n_reps = 100
burn_in = 500
thinning_factor = 50 #(1/1000)*n;
start_time = Sys.time()
print('Start time:')
print(start_time)
#run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
time_elapA = round(end_time - start_time, 2)
print(paste0('Time elapsed mcmc :', time_elapA))
###############
#APPLY SUMMARY STATS + p vals
n_reps = 69 #100
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, n_reps)
df_p_valuesII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
#time_elapII = time_elapA + round(end_time - start_time, 2)
#print(paste0('Time elapsed total:', time_elapIII))
#PLOT
plot_p_vals(df_p_valuesII)
############################################################
#RUN III - sse_inf_base_sim
#APPLY MCMC
model_type = 'sse_inf_base_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, FALSE, TRUE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n = 5500
n_reps = 100
burn_in = 500
thinning_factor = 50 #(1/1000)*n;
#RUN MCMC
# start_time = Sys.time()
# print('Start time:')
# print(start_time)
# #run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
# end_time = Sys.time()
# time_elapA = round(end_time - start_time, 2)
# print(paste0('Time elapsed mcmc :', time_elapA))
###############
#APPLY SUMMARY STATS + p vals
n_reps = 100
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, n_reps, n_mcmc)
df_p_valuesIII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
print(end_time)
#time_elapIII = time_elapA + round(end_time - start_time, 2)
#print(paste0('Time elapsed total:', time_elapIII))
#PLOT
plot_p_vals(df_p_valuesIII)
base_folder_current
base_folder_current
model_type = 'sse_inf_sse_sim' #base_sim_sse_inf' #'ssi_sim_sse_inf'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 2
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n_mcmc = 5500
n_reps = 100
burn_in = 500
thinning_factor = 5 #0 #(1/1000)*n;
#START MCMC
# start_time = Sys.time()
# print('Start time:')
# print(start_time)
# #run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
# end_time = Sys.time()
# total_time_elap = round(end_time - start_time, 2)
# print('Time elapsed:')
# print(time_elap)
###############
#APPLY SUMMARY STATS + p vals
n_reps = 100
start_time = Sys.time()
print('Start time:')
print(start_time)
get_sum_stats_total(base_folder_current, n_reps, n_mcmc)
df_p_valuesI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
time_elapI = round(difftime(end_time, start_time, units='hours'), 2) #round(end_time - start_time, 2)
print(paste0('Time elapsed:', time_elapI))
#PLOT
plot_p_vals(df_p_valuesI)
#plot_p_vals(df_p_vals_si)
View(df_p_valuesI)
get_sum_stats_total <- function(base_folder_current, thinning_factor, n_reps, n_mcmc){
'Get summary stats and p vals for all mcmc reps'
for(rep in 1:n_reps) {
#Get results
folder_rep = paste0(base_folder_current, "/rep_", rep, '/')
cat('rep = ', rep)
true_rep_sim = readRDS(paste0(folder_rep, '/sim_data.rds'))
mcmc_params <- readRDS(paste0(folder_rep, '/mcmc_params_rep_', rep, '.rds' ))
#Get true summary statistics
df_true_ss = get_summary_stats(true_rep_sim, TRUE)
#Save
saveRDS(df_true_ss, file = paste0(folder_rep, 'df_true_sum_stats_rep_', rep, '.rds' ))
#Get parameters
alpha_mcmc = mcmc_params[1]; alpha_mcmc = unlist(alpha_mcmc)
beta_mcmc = mcmc_params[2]; beta_mcmc = unlist(beta_mcmc)
gamma_mcmc = mcmc_params[3]; gamma_mcmc = unlist(gamma_mcmc)
r0_mcmc = mcmc_params[4]; r0_mcmc = unlist(r0_mcmc)
#Simulate data using thinned params
for(i in seq(burn_in, n_mcmc, by = thinning_factor)){
#print(paste0("mcmc summary stat rep ", i))
#Simulate data
sim_data_model_crit = simulate_branching_ss(num_days, shape_gamma, scale_gamma, alpha_mcmc[i], beta_mcmc[i], gamma_mcmc[i])
#Save data
saveRDS(sim_data_model_crit, file = paste0(folder_rep, 'mcmc/sim_data_iter_', i, '.rds' ))
#Get summary stats.
if (i == burn_in) { #first rep
#cat('CREATE  df_summary_stats')
flag_create = TRUE
df_summary_stats = get_summary_stats(sim_data_model_crit, flag_create)
flag_create = FALSE
#Get indices of iterations
list_ss_iters = c(i)
} else {
df_summary_stats[nrow(df_summary_stats) + 1, ] = get_summary_stats(sim_data_model_crit, flag_create)
list_ss_iters = c(list_ss_iters, i)
}
}
#Save summary stats
saveRDS(df_summary_stats, file = paste0(folder_rep, '/df_summary_stats_', rep, ".rds"))
#print(paste0('df_summary_stats', df_summary_stats))
#Save ss iterations
saveRDS(list_ss_iters, file = paste0(folder_rep, '/list_ss_iters_i', rep, '.rds'))
}
}
n_reps = 100
start_time = Sys.time()
print('Start time:')
print(start_time)
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
time_elapI = round(difftime(end_time, start_time, units='hours'), 2) #round(end_time - start_time, 2)
print(paste0('Time elapsed:', time_elapI))
#PLOT
plot_p_vals(df_p_valuesI)
View(df_p_valuesI)
#Rep
rep = 3 #9 #24 #10 #18 #10 #6 #8 #2 #12 #98 #87 #3 #20 #3 #16 #33 #16 #87 #17 #10 #8 #15, 86
display_rep_results(results_home, model_type, iter, rep, n_mcmc, true_r0,
upper_quant, trim_flag, list_i, time_elap)
#Rep specific
upper_quant = 0.99 #1.0
trim_flag = FALSE #TRUE #
list_i = seq(from = 500, to = 5500, by = 500)
#Rep
rep = 3 #9 #24 #10 #18 #10 #6 #8 #2 #12 #98 #87 #3 #20 #3 #16 #33 #16 #87 #17 #10 #8 #15, 86
display_rep_results(results_home, model_type, iter, rep, n_mcmc, true_r0,
upper_quant, trim_flag, list_i, time_elap)
trim_flag = TRUE #FALSE # #
list_i = seq(from = 500, to = 5500, by = 500)
#Rep
rep = 3 #9 #24 #10 #18 #10 #6 #8 #2 #12 #98 #87 #3 #20 #3 #16 #33 #16 #87 #17 #10 #8 #15, 86
display_rep_results(results_home, model_type, iter, rep, n_mcmc, true_r0,
upper_quant, trim_flag, list_i, time_elap)
#RUN ALL COMBINATIONS
#Setup
source("functions.R")
source("7A_Model_Criticism_SS_Events.R")
#results_home = "~/PhD_Warwick/Project_Epidemic_Modelling/Results/super_spreading_events/model_criticism_II/"
results_home = "~/PhD_Warwick/Project_Epidemic_Modelling/Results/super_spreading_events/model_criticism_II_iter_II/"
############################################################
# RUN I
###############
#APPLY MCMC
model_type = 'sse_inf_sse_sim' #base_sim_sse_inf' #'ssi_sim_sse_inf'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 2
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
n_mcmc = 5500
n_reps = 500
burn_in = 500
thinning_factor = 5 #0 #(1/1000)*n;
#START MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
total_time_elap = round(end_time - start_time, 2)
print('Time elapsed:')
print(time_elap)
###############
#APPLY SUMMARY STATS + p vals
start_time = Sys.time()
print('Start time:')
print(start_time)
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
time_elapI = round(difftime(end_time, start_time, units='hours'), 2) #round(end_time - start_time, 2)
print(paste0('Time elapsed:', time_elapI))
#PLOT
plot_p_vals(df_p_valuesI)
#plot_p_vals(df_p_vals_si)
############################################################
#RUN II - sse_inf_ssi_sim
#APPLY MCMC
model_type = 'sse_inf_ssi_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, TRUE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
start_time = Sys.time()
print('Start time:')
print(start_time)
#run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
time_elapA = round(end_time - start_time, 2)
print(paste0('Time elapsed mcmc :', time_elapA))
###############
#APPLY SUMMARY STATS + p vals
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
time_elapII = time_elapA + round(end_time - start_time, 2)
print(paste0('Time elapsed total:', time_elapIII))
#PLOT
plot_p_vals(df_p_valuesII)
############################################################
#RUN III - sse_inf_base_sim
#APPLY MCMC
model_type = 'sse_inf_base_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, FALSE, TRUE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#RUN MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
#run_mcmc_reps(n, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
time_elapA = round(end_time - start_time, 2)
print(paste0('Time elapsed mcmc :', time_elapA))
###############
#APPLY SUMMARY STATS + p vals
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesIII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
print(end_time)
time_elapIII = time_elapA + round(end_time - start_time, 2)
print(paste0('Time elapsed total:', time_elapIII))
#PLOT
plot_p_vals(df_p_valuesIII)
=
iter = 3
