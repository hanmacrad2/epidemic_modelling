if(Y < 0){
Y = abs(Y)
}
log_alpha = log_like(data, Y) - log_like(data, r0_vec[i-1]) + dgamma(Y, shape = 1, scale = 1, log = TRUE) - dgamma(r0_vec[i-1], shape = 1, scale = 1, log = TRUE) #log_prior(theta_dash) - log_prior(theta) = 1 - 1
if (is.na(log_alpha)){
print('na value')
sprintf("Y: %i", Y)
}
if(!(is.na(log_alpha)) && log(U[i]) < log_alpha) {
r0_vec[i] <- Y
count_accept = count_accept + 1
} else {
r0_vec[i] <- r0_vec[i-1]
count_reject = count_reject + 1
}
}
#Final stats
total_iters = count_accept + count_reject
accept_rate = count_accept/(count_accept+count_reject)
print("Total iterations = ")
print(total_iters)
print("Acceptance rate = ")
print(accept_rate)
r0_vec = r0_vec[burn_in:n]
r0_vec
}
r0_mcmc = MetropolisHastings_r0(data, n, sigma)
sigma =  0.5#(2.38^2/dimesnion_paramter)*Posterior or sample variance ~optimal
r0_mcmc = MetropolisHastings_r0(data, n, sigma)
MetropolisHastings_r0 <- function(data, n, sigma, x0 = 1, burn_in = 1000) {
#Set up
r0_vec <- vector('numeric', n)
r0_vec[1] <- x0
U <- runif(n)
count_accept = 0
count_reject = 0
#MCMC chain
for(i in 2:n) {
Y <- r0_vec[i-1] + rnorm(1, sd = sigma) #, mean = 0, sd = sigma_opt)
if(Y < 0){
Y = abs(Y)
}
log_alpha = log_like(data, Y) - log_like(data, r0_vec[i-1]) + dgamma(Y, shape = 1, scale = 1, log = TRUE) - dgamma(r0_vec[i-1], shape = 1, scale = 1, log = TRUE) #log_prior(theta_dash) - log_prior(theta) = 1 - 1
if (is.na(log_alpha)){
print('na value')
sprintf("Y: %i", Y)
}
if(!(is.na(log_alpha)) && log(U[i]) < log_alpha) {
r0_vec[i] <- Y
count_accept = count_accept + 1
} else {
r0_vec[i] <- r0_vec[i-1]
count_reject = count_reject + 1
}
}
#Final stats
total_iters = count_accept + count_reject
accept_rate = 100*(count_accept/(count_accept+count_reject))
print("Total iterations = ")
print(total_iters)
print("Acceptance rate = ")
print(accept_rate)
r0_vec = r0_vec[burn_in:n]
r0_vec
}
#Plots
ts.plot(r0_mcmc, ylab = 'R0', main = 'MCMC of R0, true R0 = 3.1, sd of proposal = 1')
#Plots
ts.plot(r0_mcmc, ylab = 'R0', main = paste("MCMC of R0, true R0 = 3.1, sd of proposal = ", sigma))
#Plot mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of r0 - MCMC chain, sd of proposal = ", sigma))
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, "sd of proposal = ", sigma))
#Plot mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ,",r0, " sd of proposal = ", sigma))
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#Histogram
hist(r0_mcmc, prob = TRUE)
#Hist
hist1 <- hist(r0_mcmc, breaks = 80)
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = 'Empirical density of r0 - MCMC chain')
hist1$counts <- hist1$counts/sum(hist1$counts)
length(list_r0)
r0_true = 3.1
MCMC_range_sd <- function(list_sd, data, n, r0_true){
#Initialise
par(mfrow = c(2, 2))
list_accept_rate <- vector("list", length(list_sd))
i = 1
for (sigma in list_sd) {
#R0 - mcmc
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
#Extract
r0_mcmc = mcmc_params[1]
accept_rate = mcmc_params[2]
list_accept_rate[i] = accept_rate
#Plots
#i.MCMC chain
ts.plot(r0_mcmc, ylab = 'R0',
main = paste("MCMC of R0, true R0 = ", r0_true, ", sd of proposal = ", sigma))
#ii.Cumulative Mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#iii. Histograms
hist1 <- hist(r0_mcmc, breaks = 80, xlab = 'r0', ylab = 'Density',
main = paste("Histogram of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
#iiib. Histogram - density
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = paste("Empirical density of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
}
#Create dataframe
df_sd_results <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate
)
df_sd_results
}
MetropolisHastings_r0_vII <- function(data, n, sigma, x0 = 1, burn_in = 2500) {
'Returns mcmc samples of R0 & acceptance rate'
#Set up
r0_vec <- vector('numeric', n)
r0_vec[1] <- x0
U <- runif(n)
count_accept = 0
count_reject = 0
#MCMC chain
for(i in 2:n) {
Y <- r0_vec[i-1] + rnorm(1, sd = sigma) #, mean = 0, sd = sigma_opt)
if(Y < 0){
Y = abs(Y)
}
log_alpha = log_like(data, Y) - log_like(data, r0_vec[i-1]) + dgamma(Y, shape = 1, scale = 1, log = TRUE) - dgamma(r0_vec[i-1], shape = 1, scale = 1, log = TRUE) #log_prior(theta_dash) - log_prior(theta) = 1 - 1
if (is.na(log_alpha)){
print('na value')
sprintf("Y: %i", Y)
}
if(!(is.na(log_alpha)) && log(U[i]) < log_alpha) {
r0_vec[i] <- Y
count_accept = count_accept + 1
} else {
r0_vec[i] <- r0_vec[i-1]
count_reject = count_reject + 1
}
}
#Final stats
total_iters = count_accept + count_reject
accept_rate = 100*(count_accept/(count_accept+count_reject))
print("Total iterations = ")
print(total_iters)
print("Acceptance rate = ")
print(accept_rate)
r0_vec = r0_vec[burn_in:n]
#Return r0, acceptance rate
return(c(r0_vec, accept_rate))
}
#Apply
list_sd = c(0.25, 0.5, 0.75) #1, 1.25, 1.5, 2, 2.5, 3
df_sd_results = MCMC_range_sd(list_sd, data, n, r0_true)
MCMC_range_sd <- function(list_sd, data, n, r0_true){
#Initialise
par(mfrow = c(2, 2))
list_accept_rate <- vector("list", length(list_sd))
i = 1
for (sigma in list_sd) {
print('sigma =')
print(sigma)
#R0 - mcmc
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
#Extract
r0_mcmc = mcmc_params[1]
accept_rate = mcmc_params[2]
list_accept_rate[i] = accept_rate
#Plots
#i.MCMC chain
ts.plot(r0_mcmc, ylab = 'R0',
main = paste("MCMC of R0, true R0 = ", r0_true, ", sd of proposal = ", sigma))
#ii.Cumulative Mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#iii. Histograms
hist1 <- hist(r0_mcmc, breaks = 80, xlab = 'r0', ylab = 'Density',
main = paste("Histogram of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
#iiib. Histogram - density
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = paste("Empirical density of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
}
#Create dataframe
df_sd_results <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate
)
df_sd_results
}
#Apply
list_sd = c(0.25, 0.5, 0.75) #1, 1.25, 1.5, 2, 2.5, 3
df_sd_results = MCMC_range_sd(list_sd, data, n, r0_true)
help(data.frame)
list_accept_rate[1:3]
list_r0[1:3]
df <- data.frame(
sd = list_sd,
acceptance_rate = list_r0[1:3]
)
df
list_accept_rate <- vector("list", length(list_sd))
list_accept_rate[1] = 1.5
list_accept_rate[2] = 3.5
list_accept_rate
list_accept_rate <- vector('numeric', length(list_sd))
list_accept_rate[1] = 1.5
list_accept_rate[2] = 3.5
list_accept_rate
df <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate[1:3]
)
df
MCMC_range_sd <- function(list_sd, data, n, r0_true){
#Initialise
par(mfrow = c(2, 1))
list_accept_rate <- vector('numeric', length(list_sd))
i = 1
for (sigma in list_sd) {
print('sigma =')
print(sigma)
#R0 - mcmc
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
#Extract
r0_mcmc = mcmc_params[1]
accept_rate = mcmc_params[2]
list_accept_rate[i] = accept_rate
#Plots
#i.MCMC chain
ts.plot(r0_mcmc, ylab = 'R0',
main = paste("MCMC of R0, true R0 = ", r0_true, ", sd of proposal = ", sigma))
#ii.Cumulative Mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#iii. Histograms
hist1 <- hist(r0_mcmc, breaks = 80, xlab = 'r0', ylab = 'Density',
main = paste("Histogram of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
#iiib. Histogram - density
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = paste("Empirical density of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
}
#Create dataframe
df_sd_results <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate
)
df_sd_results
}
#Apply
list_sd = c(0.25, 0.5, 0.75) #1, 1.25, 1.5, 2, 2.5, 3
df_sd_results = MCMC_range_sd(list_sd, data, n, r0_true)
df_sd_results = MCMC_range_sd(list_sd, data, n, r0_true)
View(df_sd_results)
View(df_sd_results)
View(df_sd_results)
View(hist1)
View(df_sd_results)
MCMC_range_sd <- function(list_sd, data, n, r0_true){
#Initialise
par(mfrow = c(2, 1))
list_accept_rate <- vector('numeric', length(list_sd))
i = 1
for (sigma in list_sd) {
print('sigma =')
print(sigma)
#R0 - mcmc
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
#Extract
r0_mcmc = mcmc_params[1]
print('length of ro_mcmc =')
print(length(r0_mcmc))
accept_rate = mcmc_params[2]
list_accept_rate[i] = accept_rate
i = i + 1
#Plots
#i.MCMC chain
ts.plot(r0_mcmc, ylab = 'R0',
main = paste("MCMC of R0, true R0 = ", r0_true, ", sd of proposal = ", sigma))
#ii.Cumulative Mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#iii. Histograms
hist1 <- hist(r0_mcmc, breaks = 80, xlab = 'r0', ylab = 'Density',
main = paste("Histogram of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
#iiib. Histogram - density
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = paste("Empirical density of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
}
#Create dataframe
df_sd_results <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate
)
df_sd_results
}
df_sd_mcmc_results = MCMC_range_sd(list_sd, data, n, r0_true)
MCMC_range_sd <- function(list_sd, data, n, r0_true){
#Initialise
#par(mfrow = c(2, 1))
list_accept_rate <- vector('numeric', length(list_sd))
i = 1
for (sigma in list_sd) {
print('sigma =')
print(sigma)
#R0 - mcmc
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
#Extract
r0_mcmc = mcmc_params[1]
print('length of ro_mcmc =')
print(length(r0_mcmc))
accept_rate = mcmc_params[2]
list_accept_rate[i] = accept_rate
i = i + 1
#Plots
#i.MCMC chain
ts.plot(r0_mcmc, ylab = 'R0',
main = paste("MCMC of R0, true R0 = ", r0_true, ", sd of proposal = ", sigma))
#ii.Cumulative Mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#iii. Histograms
hist1 <- hist(r0_mcmc, breaks = 80, xlab = 'r0', ylab = 'Density',
main = paste("Histogram of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
#iiib. Histogram - density
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = paste("Empirical density of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
}
#Create dataframe
df_sd_results <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate
)
df_sd_results
}
#Apply
list_sd = c(0.25, 0.5, 0.75) #1, 1.25, 1.5, 2, 2.5, 3
df_sd_mcmc_results = MCMC_range_sd(list_sd, data, n, r0_true)
#Note
a = seq(0.0, 20, by = 0.01)
b = rgamma(n, post_gamma_shape, post_gamma_scale)
a = seq(0.0, 20, by = 0.01)
b = rgamma(n, 2, 1)
for(i in 1:4) {
pdf(paste("plot", i, ".pdf", sep=""), width=4, height=4)
abc <- plot(a, b)
print(abc)
dev.off()
}
for(i in 1:4) {
pdf(paste("plot", i, ".pdf", sep=""), width=4, height=4)
abc <- hist(b)
print(abc)
dev.off()
}
MCMC_range_sd <- function(list_sd, data, n, r0_true){
#Initialise
#par(mfrow = c(2, 1))
list_accept_rate <- vector('numeric', length(list_sd))
i = 1
for (sigma in list_sd) {
print('sigma =')
print(sigma)
#R0 - mcmc
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
#Extract
r0_mcmc = mcmc_params[1]
print('length of ro_mcmc =')
print(length(r0_mcmc))
accept_rate = mcmc_params[2]
list_accept_rate[i] = accept_rate
i = i + 1
#Plots
#i.MCMC chain
pdf(paste(i, "_mcmc_chain_sd_", sigma, ".pdf", sep=""), width=6, height=4)
plot1 = ts.plot(r0_mcmc, ylab = 'R0',
main = paste("MCMC of R0, true R0 = ", r0_true, ", sd of proposal = ", sigma))
print(plot1)
dev.off()
#ii.Cumulative Mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#iii. Histograms
hist1 <- hist(r0_mcmc, breaks = 80, xlab = 'r0', ylab = 'Density',
main = paste("Histogram of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
#iiib. Histogram - density
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = paste("Empirical density of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
}
#Create dataframe
df_sd_results <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate
)
df_sd_results
}
#Apply
list_sd = c(0.25) #, 0.5, 0.75) #1, 1.25, 1.5, 2, 2.5, 3
df_sd_mcmc_results = MCMC_range_sd(list_sd, data, n, r0_true)
typeof(df)
MCMC_range_sd <- function(list_sd, data, n, r0_true){
#Initialise
#par(mfrow = c(2, 1))
list_accept_rate <- vector('numeric', length(list_sd))
i = 1
for (sigma in list_sd) {
print('sigma =')
print(sigma)
#R0 - mcmc
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
#Extract
r0_mcmc = mcmc_params[1]
#print('length of ro_mcmc =')
print(r0_mcmc)
accept_rate = mcmc_params[2]
list_accept_rate[i] = accept_rate
i = i + 1
#Plots
#i.MCMC chain
pdf(paste(i, "_mcmc_chain_sd_", sigma, ".pdf", sep=""), width=6, height=4)
plot1 = ts.plot(r0_mcmc, ylab = 'R0',
main = paste("MCMC of R0, true R0 = ", r0_true, ", sd of proposal = ", sigma))
print(plot1)
dev.off()
#ii.Cumulative Mean
r0_mean = cumsum(r0_mcmc)/seq_along(r0_mcmc)
plot(seq_along(r0_mean), r0_mean, xlab = 'Time', ylab = 'R0', main = paste("Mean of R0 MCMC chain, True R0 = ",r0, ", sd of proposal = ", sigma))
#iii. Histograms
hist1 <- hist(r0_mcmc, breaks = 80, xlab = 'r0', ylab = 'Density',
main = paste("Histogram of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
#iiib. Histogram - density
hist1$counts <- hist1$counts/sum(hist1$counts)
plot(hist1, xlab = 'r0', ylab = 'Density',
main = paste("Empirical density of r0 - MCMC chain. True R0 = ",r0, ", sd of proposal = ", sigma))
}
#Create dataframe
df_sd_results <- data.frame(
sd = list_sd,
acceptance_rate = list_accept_rate
)
df_sd_results
}
#Apply
list_sd = c(0.25) #, 0.5, 0.75) #1, 1.25, 1.5, 2, 2.5, 3
df_sd_mcmc_results = MCMC_range_sd(list_sd, data, n, r0_true)
#Apply
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
r0X = mcmc_params[1]
r0X
MetropolisHastings_r0_vII <- function(data, n, sigma, x0 = 1, burn_in = 2500) {
'Returns mcmc samples of R0 & acceptance rate'
#Set up
r0_vec <- vector('numeric', n)
r0_vec[1] <- x0
U <- runif(n)
count_accept = 0
count_reject = 0
#MCMC chain
for(i in 2:n) {
Y <- r0_vec[i-1] + rnorm(1, sd = sigma) #, mean = 0, sd = sigma_opt)
if(Y < 0){
Y = abs(Y)
}
log_alpha = log_like(data, Y) - log_like(data, r0_vec[i-1]) + dgamma(Y, shape = 1, scale = 1, log = TRUE) - dgamma(r0_vec[i-1], shape = 1, scale = 1, log = TRUE) #log_prior(theta_dash) - log_prior(theta) = 1 - 1
if (is.na(log_alpha)){
print('na value')
sprintf("Y: %i", Y)
}
if(!(is.na(log_alpha)) && log(U[i]) < log_alpha) {
r0_vec[i] <- Y
count_accept = count_accept + 1
} else {
r0_vec[i] <- r0_vec[i-1]
count_reject = count_reject + 1
}
}
#Final stats
total_iters = count_accept + count_reject
accept_rate = 100*(count_accept/(count_accept+count_reject))
print("Total iterations = ")
print(total_iters)
print("Acceptance rate = ")
print(accept_rate)
r0_vec = r0_vec[burn_in:n]
#Return r0, acceptance rate
return(list(r0_vec, accept_rate))
}
#Apply
mcmc_params = MetropolisHastings_r0_vII(data, n, sigma)
r0X = mcmc_params[1]
View(r0X)
View(r0X)
r0X
plot(r0X)
plot(seq_along(r0X), r0X)
r0X = unlist(r0X)
typeof(r0X)
plot(r0X)
plot(seq_along(r0X), r0X)
