plot_p_vals(df_sseI)
run_mcmc_base_reps <- function(n, n_reps, r0, sigma, flag_dt, base_folder, burn_in){
'Run mcmc for n_reps iterations and save'
#Data_type
flag1 = flag_dt[1]; flag2 = flag_dt[2]; flag3 = flag_dt[3]
cat('r0 = ', r0, '\n');
for(rep in 1:n_reps) {
#Rep folder
cat('\n rep =', rep, '\n')
folder_rep = paste0(base_folder, '/rep_', rep)
ifelse(!dir.exists(file.path(folder_rep)), dir.create(file.path(folder_rep), recursive = TRUE), FALSE)
#MCMC folder - mcmc results
folder_mcmc = paste0(folder_rep, '/mcmc')
ifelse(!dir.exists(file.path(folder_mcmc)), dir.create(file.path(folder_mcmc), recursive = TRUE), FALSE)
#Simulate data
if (flag1){
sim_data = simulate_branching_ss(num_days, shape_gamma, scale_gamma, alphaX, betaX, gammaX)
saveRDS(sim_data, file = paste0(folder_rep, '/sim_data.rds'))
sim_data = simulation_super_spreaders(num_days, shape_gamma, scale_gamma, alphaX, betaX, gammaX)
print('simulate ss events')
} else if (flag2){
sim_data = simulation_super_spreaders(num_days, shape_gamma, scale_gamma, alphaX, betaX, gammaX)
print('simulate ss individalss')
saveRDS(sim_data, file = paste0(folder_rep, '/sim_data.rds'))
} else if (flag3) {
sim_data = simulate_branching(num_days, r0, shape_gamma, scale_gamma)
saveRDS(sim_data, file = paste0(folder_rep, '/sim_data.rds'))
print('simulate base model')
}
#MCMC
mcmc_params = mcmc_r0(sim_data, n, sigma, burn_in)  ###!!
#mcmc_ss_x4(sim_data, n, sigma, thinning_factor, folder_rep, rep, burn_in)
#SAVE MCMC PARAMS
saveRDS(mcmc_params, file = paste0(folder_rep, '/mcmc_params_rep_', rep, '.rds' ))
}
}
############################################################
# 2. SUMMARY STATS
get_sum_stats_base_total <- function(base_folder_current, n_reps){
'Get summary stats and p vals for all mcmc reps'
for(rep in 1:n_reps) {
#Get results
folder_rep = paste0(base_folder_current, "/rep_", rep, '/')
cat('rep = ', rep)
true_rep_sim = readRDS(paste0(folder_rep, 'sim_data.rds'))
mcmc_params <- readRDS(paste0(folder_rep, 'mcmc_params_rep_', rep, '.rds' ))
#Get true summary statistics
df_true_ss = get_summary_stats(true_rep_sim, TRUE)
#Save
saveRDS(df_true_ss, file = paste0(folder_rep, 'df_true_sum_stats_rep_', rep, '.rds' ))
#Get parameters
r0_mcmc = mcmc_params[1]; r0_mcmc = unlist(r0_mcmc)
r0_na_count = 0
#MCMC folder - mcmc results #REMOVE FROM FUNCTION
folder_mcmc = paste0(folder_rep, '/mcmc')
ifelse(!dir.exists(file.path(folder_mcmc)), dir.create(file.path(folder_mcmc), recursive = TRUE), FALSE)
#Simulate data using thinned params
for(i in seq(burn_in, n, by = thinning_factor)){
#cat('r0 i = ', r0_mcmc[i])
#Check
if (is.na(r0_mcmc[i])){
print('r0 na value')
r0_mcmc[i] = 0
r0_na_count = r0_na_count + 1
}
#Simulate data
sim_data_model_crit = simulate_branching(num_days, r0_mcmc[i], shape_gamma, scale_gamma)
#Save data
saveRDS(sim_data_model_crit, file = paste0(folder_rep, 'mcmc/sim_data_iter_', i, '.rds' ))
#Get summary stats.
if (i == burn_in) { #first rep
#cat('CREATE  df_summary_stats')
flag_create = TRUE
df_summary_stats = get_summary_stats(sim_data_model_crit, flag_create)
flag_create = FALSE
#Get indices of iterations
list_ss_iters = c(i)
} else {
df_summary_stats[nrow(df_summary_stats) + 1, ] = get_summary_stats(sim_data_model_crit, flag_create)
list_ss_iters = c(list_ss_iters, i)
}
}
#Save summary stats
print(paste0('r0_na_count = ', r0_na_count))
saveRDS(df_summary_stats, file = paste0(folder_rep, '/df_summary_stats_', rep, ".rds"))
#print(paste0('df_summary_stats', df_summary_stats))
#Save ss iterations
saveRDS(list_ss_iters, file = paste0(folder_rep, '/list_ss_iters_i', rep, '.rds'))
}
}
results_folder =  "~/PhD_Warwick/Project_Epidemic_Modelling/Results/model_criticism/model_criticism_1k_I/"
#####################################################******************************************************
#RUN INFERENCE: SS EVENTS
inference_type = 'ss_events_infer/'
results_home =  paste0(resuls_folder, inference_type)
#RESULT REPITIONS
n_mcmc = 5500
n_reps = 1000
burn_in = 500
thinning_factor = 5 #0 #(1/1000)*n;
############# --- MCMC --- #############################
alphaX = 0.8 #0.7 #0.8 #0.7
betaX = 0.1 #0.05 #0.025 #0.2 #0.1
gammaX = 10 #8 #TRY WITH SMALLER GAMMA
true_r0 = alphaX + betaX*gammaX
true_r0
model_params = c(alphaX, betaX, gammaX, true_r0)
#MCMC - sigma
sigma_a = 0.4*alphaX
sigma_b = 1.0*betaX
sigma_g = 0.85*gammaX
sigma_bg = 1.5*gammaX
sigma = c(sigma_a, sigma_b, sigma_g, sigma_bg)
sigma_base = 0.5
#########################################################
# RUN I
###############
#APPLY MCMC
model_type = 'sse_inf_sse_sim' #base_sim_sse_inf' #'ssi_sim_sse_inf'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 1
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#
# #START MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_reps_ss(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timei = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'sse_inf_sse_sim'
start_time = Sys.time()
print(paste0('Time elapsed:'), start_time)
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeI = get_timeII(start_time, end_time, timei)
#PLOT
plot_p_vals(df_p_valuesI)
############################################################
#RUN II - sse_inf_ssi_sim
#APPLY MCMC
model_type = 'sse_inf_ssi_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, TRUE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_reps_ss(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'sse_inf_ssi_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeII = get_timeII(start_time, end_time, timeii)
#PLOT
plot_p_vals(df_p_valuesII)
############################################################
#RUN III - sse_inf_base_sim
#APPLY MCMC
model_type = 'sse_inf_base_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, FALSE, TRUE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#RUN MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_reps_ss(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeiii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'sse_inf_base_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesIII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
print(end_time)
#timeIII = get_timeII(start_time, end_time, timeiii)
#PLOT
plot_p_vals(df_p_valuesIII)
#*******************************************************************************************************
#*
#*
#*******************************************************************************************************
#RUN INFERENCE: BASE MODEL
inference_type = 'base_infer/'
results_home =  paste0(resuls_folder, inference_type)
#########################################################
# RUN I
###############
#APPLY MCMC
model_type = 'base_inf_sse_sim' #base_inf_base_sim' #'base_inf_ssi_sim'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 1
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#
# #START MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_base_reps(n, n_reps, true_r0, sigma_base, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeBi = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'base_inf_sse_sim'
start_time = Sys.time()
print(paste0('Time elapsed:'), start_time)
get_sum_stats_base_total(base_folder_current, n_reps)
df_p_valuesBI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeBI = get_timeII(start_time, end_time, timeBi)
#PLOT
plot_p_vals(df_p_valuesBI)
############################################################
#RUN II - base_inf_base_sim
#APPLY MCMC
model_type = 'base_inf_ssi_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, TRUE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_base_reps(n, n_reps, true_r0, sigma_base, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeBii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'base_inf_ssi_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_base_total(base_folder_current, n_reps)
df_p_valuesBII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeBII = get_timeII(start_time, end_time, timeBii)
#PLOT
plot_p_vals(df_p_valuesBII)
############################################################
#RUN III - base_inf_base_sim
#APPLY MCMC
model_type = 'base_inf_base_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, FALSE, TRUE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#
# #RUN MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_base_reps(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeBiii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'base_inf_base_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_base_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesBIII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
print(end_time)
timeBIII = get_timeII(start_time, end_time, timeBiii)
#PLOT
plot_p_vals(df_p_valuesBIII)
results_folder =  "~/PhD_Warwick/Project_Epidemic_Modelling/Results/model_criticism/model_criticism_1k_I/"
#####################################################******************************************************
#RUN INFERENCE: SS EVENTS
inference_type = 'ss_events_infer/'
results_home =  paste0(resuls_folder, inference_type)
results_folder
results_home
#####################################################******************************************************
#RUN INFERENCE: SS EVENTS
inference_type = 'ss_events_infer/'
results_home =  paste0(resuls_folder, inference_type)
results_home =  paste0(results_folder, inference_type)
print(results_home)
#RESULT REPITIONS
n_mcmc = 5500
n_reps = 1000
burn_in = 500
thinning_factor = 5 #0 #(1/1000)*n;
############# --- MCMC --- #############################
alphaX = 0.8 #0.7 #0.8 #0.7
betaX = 0.1 #0.05 #0.025 #0.2 #0.1
gammaX = 10 #8 #TRY WITH SMALLER GAMMA
true_r0 = alphaX + betaX*gammaX
true_r0
model_params = c(alphaX, betaX, gammaX, true_r0)
#MCMC - sigma
sigma_a = 0.4*alphaX
sigma_b = 1.0*betaX
sigma_g = 0.85*gammaX
sigma_bg = 1.5*gammaX
sigma = c(sigma_a, sigma_b, sigma_g, sigma_bg)
sigma_base = 0.5
#########################################################
# RUN I
###############
#APPLY MCMC
model_type = 'sse_inf_sse_sim' #base_sim_sse_inf' #'ssi_sim_sse_inf'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 1
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#
# #START MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_reps_ss(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timei = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'sse_inf_sse_sim'
start_time = Sys.time()
print(paste0('Time elapsed:'), start_time)
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeI = get_timeII(start_time, end_time, timei)
#PLOT
plot_p_vals(df_p_valuesI)
############################################################
#RUN II - sse_inf_ssi_sim
#APPLY MCMC
model_type = 'sse_inf_ssi_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, TRUE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_reps_ss(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'sse_inf_ssi_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeII = get_timeII(start_time, end_time, timeii)
#PLOT
plot_p_vals(df_p_valuesII)
############################################################
#RUN III - sse_inf_base_sim
#APPLY MCMC
model_type = 'sse_inf_base_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, FALSE, TRUE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#RUN MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_reps_ss(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeiii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'sse_inf_base_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesIII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
print(end_time)
#timeIII = get_timeII(start_time, end_time, timeiii)
#PLOT
plot_p_vals(df_p_valuesIII)
#*******************************************************************************************************
#*
#*
#*******************************************************************************************************
#RUN INFERENCE: BASE MODEL
inference_type = 'base_infer/'
results_home =  paste0(results_folder, inference_type)
print(results_home)
#########################################################
# RUN I
###############
#APPLY MCMC
model_type = 'base_inf_sse_sim' #base_inf_base_sim' #'base_inf_ssi_sim'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 1
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#
# #START MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_base_reps(n, n_reps, true_r0, sigma_base, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeBi = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'base_inf_sse_sim'
start_time = Sys.time()
print(paste0('Time elapsed:'), start_time)
get_sum_stats_base_total(base_folder_current, n_reps)
df_p_valuesBI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeBI = get_timeII(start_time, end_time, timeBi)
#PLOT
plot_p_vals(df_p_valuesBI)
############################################################
#RUN II - base_inf_base_sim
#APPLY MCMC
model_type = 'base_inf_ssi_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, TRUE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#Repitions
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_base_reps(n, n_reps, true_r0, sigma_base, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeBii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'base_inf_ssi_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_base_total(base_folder_current, n_reps)
df_p_valuesBII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeBII = get_timeII(start_time, end_time, timeBii)
#PLOT
plot_p_vals(df_p_valuesBII)
############################################################
#RUN III - base_inf_base_sim
#APPLY MCMC
model_type = 'base_inf_base_sim' #'sse_inf_sse_sim' 'sse_inf_base_sim'
flags_data_type = c(FALSE, FALSE, TRUE) #1)ss_events, 2) ss_individuals, 3) basline
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#
# #RUN MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_base_reps(n_mcmc, n_reps, model_params, sigma, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeBiii = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'base_inf_base_sim'
start_time = Sys.time()
print(paste0('Start time:', start_time))
get_sum_stats_base_total(base_folder_current, thinning_factor, n_reps, n_mcmc)
df_p_valuesBIII = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
print(end_time)
timeBIII = get_timeII(start_time, end_time, timeBiii)
#PLOT
plot_p_vals(df_p_valuesBIII)
inference_type = 'base_infer/'
results_home =  paste0(results_folder, inference_type)
print(results_home)
#########################################################
# RUN I
###############
#APPLY MCMC
model_type = 'base_inf_sse_sim' #base_inf_base_sim' #'base_inf_ssi_sim'
flags_data_type = c(TRUE, FALSE, FALSE) #1)ss_events, 2) ss_individuals, 3) basline
iter = 1
base_folder_current = paste0(results_home, model_type, '/iter_', iter)
print(base_folder_current)
#
# #START MCMC
start_time = Sys.time()
print('Start time:')
print(start_time)
run_mcmc_base_reps(n, n_reps, true_r0, sigma_base, flags_data_type, base_folder_current, burn_in)
end_time = Sys.time()
timeBi = get_time(start_time, end_time)
###############
#APPLY SUMMARY STATS + p vals
model_type = 'base_inf_sse_sim'
start_time = Sys.time()
print(paste0('Time elapsed:'), start_time)
get_sum_stats_base_total(base_folder_current, n_reps)
df_p_valuesBI = get_p_values_total(base_folder_current, n_reps)
end_time = Sys.time()
timeBI = get_timeII(start_time, end_time, timeBi)
#PLOT
plot_p_vals(df_p_valuesBI)
View(run_mcmc_base_reps)
View(run_mcmc_base_reps)
